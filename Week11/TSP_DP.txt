#include <iostream>
#include <vector>
#include <cmath>
#define INF 999999

using namespace std;

typedef vector<vector<int>> matrix_t;

int count(int A);
bool isIn(int i, int A);
int diff(int A, int j);
int minimum(int n, int i, int& minJ, int A, matrix_t& W, matrix_t& D);
void travel(int n, matrix_t& W, matrix_t& D, matrix_t& P, int& minlength);
void tour(int v, int A, matrix_t& P);

int main(void)
{
    int n, m, u, v, w, minlength;
    matrix_t W, D, P;

    cin >> n >> m;
    W.resize(n + 1, vector<int>(n + 1, INF));
    D.resize(n + 1, vector<int>(pow(2, n - 1), INF));
    P.resize(n + 1, vector<int>(pow(2, n - 1), INF));

    for (int i = 1; i <= n; i++)
        W[i][i] = 0;

    for (int i = 0; i < m; i++) {
        cin >> u >> v >> w;
        W[u][v] = w;
    }

    travel(n, W, D, P, minlength);
    cout << minlength << "\n";

    cout << "1 ";
    tour(1, pow(2, n - 1) - 1, P);
    for (int i = 1; i <= n; i++)
        for (int j = 0; j < pow(2, n - 1); j++)
            if (D[i][j] != INF)
                cout << i << " " << j << " " << D[i][j] << "\n";

    return 0;
}

int count(int A)
{
    int cnt = 0;
    for (; A != 0; A >>= 1)
        if (A & 1) cnt++;
    return cnt;
}

bool isIn(int i, int A)
{
    return (A & (1 << (i - 2))) != 0;
}

int diff(int A, int j)
{
    return (A & ~(1 << (j - 2)));
}

int minimum(int n, int i, int& minJ, int A, matrix_t& W, matrix_t& D)
{
    int minV = INF;
    for (int j = 2; j <= n; j++) {
        if (!isIn(j, A)) continue;
        int value = W[i][j] + D[j][diff(A, j)];
        if (minV > value) {
            minV = value;
            minJ = j;
        }
    }
    return minV;
}

void travel(int n, matrix_t& W, matrix_t& D, matrix_t& P, int& minlength)
{
    int i, j, k, A;

    int subset_size = pow(2, n - 1);    // 가능한 vertex의 부분집합은 총 2^(n-1)개
    for (i = 2; i <= n; i++)
        D[i][0] = W[i][1];
    for (k = 1; k <= n - 2; k++)
        for (A = 0; A < subset_size; A++) {
            if (count(A) != k)  continue;
            for (i = 2; i <= n; i++) {
                if (isIn(i, A)) continue;
                D[i][A] = minimum(n, i, j, A, W, D);
                P[i][A] = j;
            }
        }
    A = subset_size - 1;
    D[1][A] = minimum(n, 1, j, A, W, D);
    P[1][A] = j;
    minlength = D[1][A];
}

void tour(int v, int A, matrix_t& P)
{
    int k = P[v][A];
    if (A == 0)
        cout << "1" << "\n";
    else {
        cout << k << " ";
        tour(k, diff(A, k), P);
    }
}

/*
외판원 순회 문제와 동적계획법
Description

교재와 강의자료를 참고하여 TSP 문제를 동적계획법으로 해결하는 Algorithm 3.11의 구현을 완성하시오.



단, 출력값은 알고리즘에서 계산한 D 테이블에서 최적값이 무한대가 아닌 값들을 출력해야 함에 주의하시오.


Input
첫 줄에 그래프의 정점 개수 n과 그래프의 간선 개수 m이 주어진다.

둘째 줄부터 m개의 간선이 u, v, w의 형태로 주어진다.


Output
첫 줄에 순회 경로의 최적 경로값 minlength를 출력한다.

둘째 줄에 1번 정점에서 시작하여 1번 정점으로 되돌아 오는 최적 경로를 출력한다.

(최적 경로가 여러 개 있을 수 있으므로, 교재와 강의자료에서 구현한 알고리즘의 출력 경로를 출력하도록 유의할 것)

셋째 줄부터 D 테이블을 참조하여 D[i][j]가 무한대가 아닌 항목을 아래와 같이 출력한다.

i j D[i][j]


Sample Input 1

4 9
1 2 2
1 3 9
2 1 1
2 3 6
2 4 4
3 2 7
3 4 8
4 1 6
4 2 3
Sample Output 1

21
1 3 4 2 1
1 7 21
2 0 1
2 4 10
2 6 20
3 1 8
3 4 14
3 5 12
4 0 6
4 1 4
Sample Input 2

5 20
1 2 8
1 3 13
1 4 18
1 5 20
2 1 3
2 3 7
2 4 8
2 5 10
3 1 4
3 2 11
3 4 10
3 5 7
4 1 6
4 2 6
4 3 7
4 5 11
5 1 10
5 2 6
5 3 2
5 4 1
Sample Output 2

29
1 2 3 5 4 1
1 15 29
2 0 3
2 2 11
2 4 14
2 6 19
2 8 20
2 10 16
2 12 17
2 14 21
3 0 4
3 1 14
3 4 16
3 5 19
3 8 17
3 9 16
3 12 14
3 13 17
4 0 6
4 1 9
4 2 11
4 3 17
4 8 21
4 9 20
4 10 17
4 11 22
5 0 10
5 1 9
5 2 6
5 3 16
5 4 7
5 5 10
5 6 12
5 7 18
*/